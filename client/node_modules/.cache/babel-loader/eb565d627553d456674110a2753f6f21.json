{"ast":null,"code":"//to show an alert to each error\nimport { setAlert } from './alert';\nimport axios from 'axios';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, AUTH_ERROR, USER_LOADED, LOGIN_FAIL, LOGIN_SUCCESS, LOGOUT } from './types';\nimport setAuthToken from '../utils/setAuthToken'; //Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // register User\n\nexport const register = ({\n  firstname,\n  lastname,\n  email,\n  password,\n  picture,\n  status,\n  subscribe,\n  readterms\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  console.log('body dans auth action');\n  const body = JSON.stringify({\n    firstname,\n    lastname,\n    email,\n    password,\n    picture,\n    status,\n    subscribe,\n    readterms\n  });\n  console.log('auth body =', body);\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    console.log('res=', res);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    }\n  }\n}; // login User\n\nconsole.log('login user Action');\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    console.log('err login', err);\n    console.log('err.response', err.response);\n    console.log('err.response.data', err.response.data);\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      //console.log('erro.msg', errors.msg);\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n      dispatch({\n        type: LOGIN_FAIL\n      });\n    }\n  }\n}; //LOGOUT\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["E:/MERN_App/client/src/actions/auth.js"],"names":["setAlert","axios","REGISTER_SUCCESS","REGISTER_FAIL","AUTH_ERROR","USER_LOADED","LOGIN_FAIL","LOGIN_SUCCESS","LOGOUT","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","firstname","lastname","email","password","picture","status","subscribe","readterms","config","headers","console","log","body","JSON","stringify","post","errors","response","forEach","error","msg","login","logout"],"mappings":"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","sourcesContent":["//to show an alert to each error\r\nimport { setAlert } from './alert';\r\nimport axios from 'axios';\r\nimport {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  AUTH_ERROR,\r\n  USER_LOADED,\r\n  LOGIN_FAIL,\r\n  LOGIN_SUCCESS,\r\n  LOGOUT,\r\n} from './types';\r\n\r\nimport setAuthToken from '../utils/setAuthToken';\r\n\r\n//Load User\r\nexport const loadUser = () => async (dispatch) => {\r\n  if (localStorage.token) {\r\n    setAuthToken(localStorage.token);\r\n  }\r\n  try {\r\n    const res = await axios.get('/api/auth');\r\n    dispatch({\r\n      type: USER_LOADED,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: AUTH_ERROR,\r\n    });\r\n  }\r\n};\r\n\r\n// register User\r\nexport const register = ({\r\n  firstname,\r\n  lastname,\r\n  email,\r\n  password,\r\n  picture,\r\n  status,\r\n  subscribe,\r\n  readterms,\r\n}) => async (dispatch) => {\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  };\r\n  console.log('body dans auth action');\r\n\r\n  const body = JSON.stringify({\r\n    firstname,\r\n    lastname,\r\n    email,\r\n    password,\r\n    picture,\r\n    status,\r\n    subscribe,\r\n    readterms,\r\n  });\r\n  console.log('auth body =', body);\r\n  try {\r\n    const res = await axios.post('/api/users', body, config);\r\n    console.log('res=', res);\r\n    dispatch({\r\n      type: REGISTER_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n    dispatch(loadUser());\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n    if (errors) {\r\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\r\n\r\n      dispatch({\r\n        type: REGISTER_FAIL,\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\n// login User\r\nconsole.log('login user Action');\r\nexport const login = (email, password) => async (dispatch) => {\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  };\r\n  const body = JSON.stringify({ email, password });\r\n\r\n  try {\r\n    const res = await axios.post('/api/auth', body, config);\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n    dispatch(loadUser());\r\n  } catch (err) {\r\n    console.log('err login', err);\r\n    console.log('err.response', err.response);\r\n    console.log('err.response.data', err.response.data);\r\n\r\n    const errors = err.response.data.errors;\r\n\r\n    if (errors) {\r\n      //console.log('erro.msg', errors.msg);\r\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\r\n\r\n      dispatch({\r\n        type: LOGIN_FAIL,\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\n//LOGOUT\r\nexport const logout = () => (dispatch) => {\r\n  dispatch({ type: LOGOUT });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}